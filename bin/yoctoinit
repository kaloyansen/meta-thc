#!/usr/bin/env echo source $0
# name: yoctoinit
# purpose: set yocto environment

## uncomment next two lines and set values corresponding your configuration
# export METAPATH=/system/path/to/metadata/directory
# export BBPATH=/system/path/to/your/build/directory

## envirennement initialization
cd $METAPATH/poky
source oe-init-build-env $BBPATH
bitbake-layers show-layers

## functions ##############################################

DIRECTIVE=(MACHINE DISTRO_NAME TCLIBC XSERVER IMAGE_FSTYPES \
MACHINE_FEATURES DISTRO_FEATURES IMAGE_FEATURES INHERIT \
IMAGE_INSTALL PACKAGE_INSTALL)

# purpose: search recipes by name
# usage: bbrecipe <expression>
bbrecipe() {

    bitbake-layers show-recipes|grep -C 1 $1
}

# purpose: get packages for a target
# usage: bbpackage <target>
bbpackage() {

    bitbake -g $1 && cat pn-buildlist | grep -ve "native" | sort | uniq
}

# purpose: a list of image recipes
# usage: bbimage
bbimage() {

    bitbake-layers show-recipes "*-image-*"
}

# purpose: a list of distribution configurations
# usage: bbdistro
bbdistro() {

    ls -l $METAPATH/*/*/conf/distro|grep conf
}

# purpose: configure kernel
# usage: bbkernel
bbkernel() {

    bitbake virtual/kernel -c menuconfig
}

# purpose: get a directive value for specific target
# usage: bbvalue <target> <directive>
bbvalue() {

    bitbake-getvar -r $1 --value $2
}

# purpose: get machine
# usage: bbmachine <target>
bbmachine() {

    bbvalue $1 MACHINE
}

# purpose: dump directive values
# usage: bbreport <target>
bbreport() {

    for directive in "${DIRECTIVE[@]}"
    do

        dirval=`bitbake-getvar -r $1 --value $directive`
        echo $directive: $dirval
    done
}

# purpose list files in a package
# usage: bbfile <package>
bbfile() {

    oe-pkgdata-util list-pkg-files $1
}

## aliases ################################################################################################

alias emu=runqemu\ slirp\ nographic\ serial

